***BASIC COMMANDS***

ls(list) = list directory contents

$ ls Downloads/ [List the content of Downloads]

pwd(print working directory) = Prints the current directory you are in 

$ pwd
/home/Chris

cd(Change directory) =Changes the directory

$cd Downloads

touch = Creates an empty file

$ touch myemptyfile.txt

cat(concatenate) = Concatenate files and print on the standard input. 

$ cat myawesomefile.txt
[Output of file]

mkdir(Make Directory) = Creates a directory

$ mkdir [name of directory]

mv(move) = Moves a file/rename a file

$ mv [SOURCE] [DESTINATION]
$ mv myawesomefile.txt aplaceforawesomeness/

rm(remove) = Removes files or directories

$ rm [file]
$ rm afile.txt

To remove a directory that is not empty

$ rm -r [Directory]
$ rm -r adirectory/

rmdir(Remove diretory) = Removes Empty Directories

$ rmdir [directory]
$ rmdir aplaceforawesomeness

man(manual) = Displays the manual page for a command

$ man [command/program]
$ man ls

***WORKING WITH FILES***

head = Print the first 10 lines of each File to standard output

$ head [option] file
$ head file.txt

tail = Print the last 10 lines of each File to standard output

$ tail [option] file
$ tail file.txt

Useful option is -f which lets you see new addition to files, useful for looking at files

ln(link) = Make links between files

$ ln [target] [link_name]

Can also be used to make symbolic links(Links that link to another link)

$ ln -s file1.txt file2.txt

***SHELL SHORTCUTS BASH ****
ctrl-a (beginning of line)
ctrl-e (end of line)
ctrl-r (backwards history search)
ctrl-c to interrupt
clear
closing connections/terminals -ctrl-d

poweroff / init 0 / shutdown -h now

***Whats Happening on this machine***

w - Shows who is logged on this system and what they are doing

$ w

Output
user - user name
tty - Terminal type such as pts/0 or console
From - The remote host or IP address
Login@ - Login time
IDLE - Idle time
JCPU - The JCPU time is the time used by all 

es attached to the tty. 
PCPU - The PCPU time is the time used by the current process displayed in WHAT field
WHAT - The command line of users current process



netstat - Print network connections, routing tables, interface statistics

$ netstat

Output explained
  Proto: TCP/UDP
  Recv-Q: How much data is in the queue waiting to be read. Zero is good, non zero is bad
  Send-Q: How much data is in the queue waiting to be sent. Zero is good, non zero is bad
  Local Address: Which hosts and ports the listed sockets are connected, local is always the computer/server you are on
  Foreign Address: The remote computer/server to which the socket is connected. 
  State: Tells in which states the listed sockets are
        Listen(Wait for external computer/server to contact us)
        Established(ready for communication)
        Clos Wait(Remote host closed the connection, local program has not)
  PID/Program Name : Which PID owns the listed socket and the name of the program running in the process with that pid. 
  
  If the Foreign address is *.* the socket is waiting for remote host to send the first data
  
  Command examples
  -List all Ports
  $ netstat -a (List All ports)
  $ netstat -at (List all TCP ports)
  $ netstat -au (List all UDP ports)
  
  -List Sockets in Listening state
  $ netstat -l(All ports in Listening state)
  $ netstat -lt(All TCP ports in Listening state)
  
  -Show Statistics for each protocol
  $ netstat -s
  
  -Display PID and program names in output
  $ netstat -pt
  
  -Don't resolve Hostname, port, and user name
  $ netstat -an
  
  -Print Netstat continuously
  $ netstat -c
  
  -Find out which port a program is running
  $ netstat -ap | grep ssh
  
  
***PIPES AND REDIRECTION***

Standard input(0) =  A place a program gets information from; by default, the shell directs standard input from the keyboard.
Standard ouput(1) =  A place to which a program can send information
Standard error(2) = Arunning program has a place to send error messages. By default, the shell directs standard error to the screen

[Number in () are file descriptors]

We can redirect these inputs/ouputs using redirection

*Output Redirection using >*

$ echo "this should be in a file" > somefile.txt
[This creates a file with the output of the command ran]

$ echo "this should be in ine two" >> somefile.txt
[This appends the ouput to the created file]

$ tophs 2>error.txt
[Standard Error needs to be manually redirected using the 2 file descriptor. The error.txt contains the error shown on the shell]

*Input redirection using <*

We have a created a file with 4 animals. 
Cats
Zebra
Dogs
Rhino

We can use input redirection to run sort on the file

$ sort < listtosort.txt

Output would then be
Cats
Dogs
Rhino
Zebra

*Pipes*

| (Pipes) = Program 1 feeds output into program 2

$ ps aux | less
[This would run the less command againt the results]

***Filtering Output and Finding Things***

*Logical And or &&*

&& (Logical And) = If program 1 works, program 2 will run. If program 1 fails, program 2 will fail

$ echo "Hello" && echo "Hi sir" 
[Program 1 runs so then program 2 runs]

Hello
Hi sir

*Cut*

cut = remove sections from each line of files

We have a file called fredflintstone.txt with the following lines
one:yabba
two:dabba
three:do

We can use cut to sort these

$ cat fredflintstone.txt | cut -d: f2
yabba
dabba
do

[We specify a delimiter with -d and then the character : Then display field 2

If we did field 1
one
two 
three

*sort*

sort = Sort lines of text files

If we sort the fredflintstone.txt

$ sort fredflintstone.txt
one:yabba
three:do
two:dabba

*uniq*

uniq = report or omit repeated lines

If we modify fredflintstone.txt to have duplicate lines

one:yabba
two:dabba
three:do
three:do

$ uniq fredflintstone.txt

Output would omit the second "three:do"

*wc*

wc = print newline, word, and byte counts for each file

$wc fredflintstone.txt

*grep*

grep = print lines matching a pattern

$ grep one fredflinstone.txt
one:yabba


***PACKAGE MANAGEMENT***

sudo (super User do) = Allows a permitted user to execute command as the superuser(root)
$ sudo apt-get update

apt-get = A package manager for Debian based systems. Does 
Dependency Resolution
Compute which packages need to be downloaded
Download Package files 
Install package Files

$ sudo apt-get update [Find updates]
$ sudo apt-get upgrade [Install updates]

apt-cache = Searches and returns for packages on a Debian system

$ apt-cache search [search phrase]
$ apt-cache search tmux

To install
$ sudo apt-get install tmux [Install]

To remove
$ apt-get remove [Uninstall]

***LINUX FILE PERMISSIONS***

Files and directories have permissions in Linux

-rw-r--r-- 1 root   root      0 Apr 18 12:57 exampleoffile.txt

The permissions are broken into 4 sections
- = Indicates a file (-), a directory (d), or a link (l)
rwx = Read, write, and execute permissions for the owner of the file
r-- = Read, write, and execute permissions for members of the group owning the file
r-- = Read, write, and execute permissions for other users

So taking the file above
- = a file
rw- = Read, write, but not execute for the owner
r-- = Read only for the members of the group owning the file
r-- = Read only for other users

r = read file
w = write file
x = execute file

*Changing Permissions using chmod*

chmod - Change file mode bits

$ chmod 777 somefile.txt

Permissions in numeric mode

0 = No permission
1 = Execute
2= Write
3 = Read

Add up the numbers depending on the level of permission you want to give

0 = ---
1 = --x
2 = -w-
3 = -wx
4 = r-
5 = r-x
6 = rw-
7 = rwx

Permissions in symbolic permissions notation

u = user
g = group
o = other

$ chmod u=rwx, g=rx, o=r somefile.txt

[User can read,write,execute - group can read,execute - other users can read only]

*Change Owner*

chown = Change file owner and group

$ chown [owner] [group]

***Basic Linux Access Control***

whoami = print who you are logged in as

id = print user and effective group ids 

***User Account Management***

*Add a user*

useradd = create a new user or update default new user information

$ useradd -m -d /home/testuser -s /bin/bash testuser

[Creates a home directory (-m), defines the home directory (-d), defines the default shell (-s) and the user name is testuser]

We can confirm the user is created in /etc/passwd

$ tail -f /etc/passwd

*/etc/passwd Explained*

/etc/passwd file stores essential information which is required during login, user account information. 

/etc/passwd contains one entry per line for each user or user account. All fields are seperated by a colon(:). 

chrisubuntu:x:1000:1000:ChrisUbuntu,,,:/home/chrisubuntu:/bin/bash

1: Username = chrisubuntu
2: Password = An x character indicates an encrypted password is stored in /etc/shadow
3: User ID (UID) = Each user must be assigned a user ID. 
      UID 0 is reserved for root 
      UID 1-99 are reserved for predefined account 
      UID 100-99 are reserved by system for administrative and system accounts/groups
4: Group ID(GID) = The primary group ID (stored in /etc/group file)
5: User ID info = The comment field. It allows you to add extra info about the user such as users full name
6: Home directory = The absolute path to the directory the user will be in when they log in. 
7: Command/shell = The absolute path of a command or shell (/bin/bash). 

*Set a Password for a user*
You must set a password for a user when creating

passwd = change user password

$ passwd testuser 
Enter new UNIX password:
Retype new UNIX password:

*Lock/Unlock a user Account*

usermod = modify a user account

To lock

$ usermod -L testuser

We can confirm user is locked in /etc/shadow as a ! will be displayed before their password

testuser:!234234243

To Unlock

$ usermod -U testuser

testuser:234234243

*DELETE A USER*

userdel = delete a user account and related files

$ userdel testuser

Confirm by looking at /etc/passwd

***Processes Overview***

top - Display linux processes

$ top

Output (https://www.booleanworld.com/guide-linux-top-command/)
-System time, uptime and user sessions on the first line

-Tasks on the second line, task states are below and how they fall into the 2nd line in top
  total = Total number of processes
  running(R) = Processes that are executing on the CPU or in the run queue ready to be executed[Running]
  Interruptible sleep(D) = Processes that are waiting for an event to complete[Sleeping]
  Uninterruptible sleep(S) = A process that is waiting for an I/O operation to complete[Sleeping]
  Stopped(T) = Processes that have been stoppe dby a job control signal[Stopped]
  Zombie(Z) = Terminated processes whose data structures are still around[Zombie]
  
-Memory Usage ; Split into two parts 
  mem - Physical Memory
  swap - Swap space is a part of the hard disk that is used like RAM. When RAM usage gets too high,
         infrequently used regions of the RAM are written into the swap space. Relying too much on swap hurts system performance
         
-Load Average ; First line
  Explained; A load average of 0.4 means the system is doing only 40% of work it can do. 
             A load average of 1 means that the system is exactly at capacity. 
             
-The Task Area
  
  Process ID, uniquly identifies a process
  USER = User who started the process
  PR/NI = The NI field shows the "nice" value of a process. The PR field shows scheduling priority from the Kernels view. 
  VIRT = Total ammount of memory consumed by the process
  RES = Memory consumed by the process in RAM
  %MEM = RES value as percentage of total RAM available
  SHR = The ammount of memory shared with other processes
  S = States the process can be in the single letter form
  TIME+ = Total CPU time used by process since it started
  COMMAND = Shows the name of the process

***Process Signals***

*STOP A PROCESS*

kill = send a signal to a process

$ kill [pid]

We can also use signals when killing processes

By default signal 15 is used[SIGTERM = Orderley shutdown of process]

kill -9 is used when a process is unresponsive [SIGKILL = Close immediatly]

You can list the signals with 
$ kill -l 

*STOP PROCESSES BY NAME*

killall = stop processes by name

$ killall [process name]

*STOP PROCESSES BY USER*

pgrep = look up processes based on name
pkill = Kill groups of processes based on name

Examples

$ pgrep -u root 
[Finds all process id's for user root]

$ pkill [process]
[Kills all process with the name specified]

***State, Niceness, and How to monitor processes***

*Process states*
  running(R) = Processes that are executing on the CPU or in the run queue ready to be executed[Running]
  Interruptible sleep(D) = Processes that are waiting for an event to complete[Sleeping]
  Uninterruptible sleep(S) = A process that is waiting for an I/O operation to complete[Sleeping]
  Stopped(T) = Processes that have been stoppe dby a job control signal[Stopped]
  Zombie(Z) = Terminated processes whose data structures are still around[Zombie]

*Niceness*

In Linux we can set guidelines for the CPU to follow when it is looking at all the tasks it has to do. 
These guidelines are called niceness or nice value. 
The Linux niceness scale goes from -20 to 19. 
The lower the number the more priority that task gets. 
If the niceness value is high number like 19 the task will be set to the lowest priority and the CPU will process it whenever it gets a chance. 
The default nice value is zero.

nice = run a program with modified scheduling priority 

nice -n [nice value] [command]:

Example
$ nice -n 10 apt-get upgrade
[increment the default nice value by a positive 10 for the command, ‘apt-get upgrade']

$ renice 10 -p 21827
[This will increment the priority of the process with an id of 21827 to 10]

*The /proc filesystem*

Procfs or "/proc" is pseudo-filesystem under Linux that is used to present process information and kernel processes. 
On systems running with a kernel level of 2.6 and above have been moved to another pseudo filesystem called "sysfs" mounted under "/sys". 
"/proc" is stored in memory, unlike other filesystems, which are stored on disk. 
  If you list the "/proc" filesystem, you will notice that the majority of files are of a "0" byte length. 
  However, if you view the data, the data is presented

john@john-desktop:~$ file /proc/uptime 
/proc/uptime: empty

john@john-desktop:~$ cat /proc/uptime 
5151.72 2053.73

john@john-desktop:/proc$ ls -F
1/     1800/  2016/  2290/  2857/  45/        cpuinfo        mounts@
10/    1818/  2029/  2297/  2861/  584/       crypto         mtrr
1003/  1855/  2033/  23/    2862/  6/         devices        net@
1042/  1866/  2083/  2320/  2932/  613/       device-tree/   pagetypeinfo
11/    19/    21/    2322/  298/   619/       diskstats      partitions
1105/  1906/  2111/  2324/  299/   64/        dma            sched_debug
1116/  1909/  2120/  2326/  3/     668/       dri/           schedstat
1129/  1910/  2122/  233/   3039/  669/       driver/        scsi/
1153/  1914/  2136/  234/   3046/  670/       execdomains    self@
1154/  1916/  2138/  2370/  3141/  691/       fb             slabinfo
1156/  1925/  2151/  2371/  3149/  698/       filesystems    softirqs
1174/  1934/  2191/  24/    3189/  7/         fs/            stat
1176/  1942/  22/    2427/  3208/  780/       interrupts     swaps
1177/  1952/  2201/  2433/  3229/  791/       iomem          sys/
1181/  1954/  2209/  25/    325/   8/         ioports        sysrq-trigger
1187/  1955/  2210/  2503/  3257/  821/       irq/           sysvipc/
12/    1956/  2213/  2508/  326/   823/       kallsyms       timer_list
1214/  1957/  2220/  2555/  3280/  9/         kcore          timer_stats
1240/  1958/  2225/  26/    344/   938/       key-users      tty/
13/    1960/  2226/  2646/  35/    973/       kmsg           uptime
1303/  1961/  2243/  2653/  37/    982/       kpagecount     version
14/    1964/  2247/  2654/  38/    988/       kpageflags     version_signature
15/    1967/  2250/  2655/  4/     acpi/      latency_stats  vmallocinfo
1586/  1998/  2262/  2659/  40/    asound/    loadavg        vmstat
16/    2/     2263/  2660/  41/    buddyinfo  locks          zoneinfo
1602/  2000/  2269/  27/    42/    bus/       mdstat
17/    2002/  2278/  2848/  425/   cgroups    meminfo
1768/  201/   2285/  2852/  43/    cmdline    misc
18/    2013/  2288/  2856/  444/   consoles   modules

The numbers represent a process (PID - Process ID). Each of these numbers is a directory. Within each of these numbered directories are further files that contain information about the running process. 

*Sysfs*
Many newer distributions of Linux are using "sysfs" mounted on /sys as a way of exporting information from the kernel to various applications. "sysfs" generally contains nine top level directories:


john@john-desktop:/sys$ ls -l
total 0
drwxr-xr-x   2 root root 0 May 18 20:16 block
drwxr-xr-x  23 root root 0 May 18 20:16 bus
drwxr-xr-x  46 root root 0 May 18 20:16 class
drwxr-xr-x   4 root root 0 May 18 20:16 dev
drwxr-xr-x  15 root root 0 May 18 20:16 devices
drwxr-xr-x   4 root root 0 May 18 20:16 firmware
drwxr-xr-x   7 root root 0 May 18 20:16 fs
drwxr-xr-x   6 root root 0 May 18 20:16 kernel
drwxr-xr-x 121 root root 0 May 18 20:16 module
drwxr-xr-x   2 root root 0 May 18 20:16 power

Brief explanation of directories within "/sys"

/sys/block : Contains known block devices

/sys/bus : Contains all registered buses.

/sys/class : Contains Devices

/sys/device : All devices known by the kernel organised by the bus that they connect to

/sys/firmware : Contains firmware files for some devices

/sys/fs : Contains files to control filesystems

/sys/kernel : Various kernel related files

/sys/module : Loaded kernel modules. Each module is represented by a directory of the same name.

/sys/power : Various files to handle power state of system

***Filesystem Purpose and Absolute/Relative Pathnames***

Absolute Path = An absolute path is defined as specifying the location of a file or directory from the root directory(/)

Examples:
/home/user/Document/srv.txt
/root/data/dev.jpg
/var/log/messages

Relative Path = Path related to the present working directory(pwd)

If I am in /home/chrisubuntu

$ cd Desktop/

***Filesystem Layout Overview***
/bin = Common Binaries
/sbin = Binaries used for system administration
/etc = Configuration files for all the programs that run on your Linux/Unix system
/tmp = Temporary files are placed here by default, cleared on reboot
/var = Variable data, such as logs on which is constantly being modified by various programs running on your system
/home = User HOME directories are found here
/mnt = Temporary mount point for when you insert your USB stick,it gets mounted under /mnt. 
       Though in Ubuntu it is usually mounted under /media
/opt = Third party application packages which does not conform to the standard Linux file hierarchy can be installed here.
/usr = The secondary hierarchy which contain its own bin and sbin sub-directories

***Linux File Types***
There are 7 different types of file types in Linux. 

They are shown at the beginging of a file, they are

- : Regular File
d : Directory
c : Character device file = Allow users/programs to communicate with hardware peripheral devices
b : Block devices = Govern hardware such as hard drives, memory, etc
s : Local domain sockets = Used for communication between processes such as X windows, syslog, etc
p : Named pipes = rare
l : Symoblic link = Assign a file/directory multiple identies used hard/soft links. 

*CRON*
Cron allows users to run commands/scripts at a given date and time.

Each cron command entry in the crontab file has five time and date fields (followed by a user name, only if it is the system crontab file), followed by a command.

Commands are executed by cron when the minute, hour, and month fields match the current time, 
AND at least one of the two day fields (day of month, or day of week) match the current day.

The cron daemon checks the crontab once every minute. 

crontab = Used to update/modify the cron files. 

*Two types of Crontab files*
-Unix/Linux System crontab: Usually, used by system services and critical jobs that requires root like privileges
-User:  User can install their own cron jobs using the crontab command

*How do I install/create my own cron jobs*
$ crontab -e

crotab will open in the editor of your choosing

The syntax is:

1 2 3 4 5 /path/to/command arg1 arg2

WHERE 
(1): Minute (0-59)
(2): Hours (0-23)
(3): Day (0-31)
(4): Month (0-12 [12 == December])
(5): Day of the week(0-7 [7 or 0 == sunday])
/path/to/command – Script or command name to schedule

Operators
The asterisk (*) : This operator specifies all possible values for a field. 
                   For example, an asterisk in the hour time field would be equivalent to every hour
The comma (,) : This operator specifies a list of values, for example: “1,5,10,15,20, 25”.
The dash (-) : This operator specifies a range of values, for example: “5-15” days , which is equivalent to typing “5,6,7,8,9,….,13,14,15” using the comma operator.
The separator (/) : This operator specifies a step value, for example: “0-23/” can be used in the hours field to specify command execution every other hour. Steps are also permitted after an asterisk, so if you want to say every two hours, just use */2.

*EXAMPLES*
Run /home/wendy/script.sh every Monday, at 9 A.M. and 6 P.M:
  0 9,18 * * Mon /home/wendy/script.sh
  


